TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] GET    /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:06:00 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:08:29 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:11:52 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:13:20 debug.go:45: [GIN-debug] Listening and serving HTTP on :7082
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:16:54 debug.go:45: [GIN-debug] Listening and serving HTTP on :7082
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:19:21 debug.go:45: [GIN-debug] Listening and serving HTTP on :7082
TRACE: 2017/03/20 18:19:28 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

<<<<<<< HEAD
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:22:44 debug.go:45: [GIN-debug] Listening and serving HTTP on :7082
TRACE: 2017/03/20 18:22:46 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:22:46 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:22:46 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:23:37 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:24:26 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:24:26 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:24:26 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:24:56 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:28:09 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:28:09 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:28:09 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:28:22 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:28:59 debug.go:45: [GIN-debug] Listening and serving HTTP on :7082
TRACE: 2017/03/20 18:29:03 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:29:03 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:29:03 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:29:35 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:29:35 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:29:35 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:29:51 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:29:51 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:30:31 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:30:31 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:30:31 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:30:43 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:32:47 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:32:47 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:32:47 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:32:52 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:33:17 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:33:17 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:33:17 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:33:50 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:33:52 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:33:52 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:33:52 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:34:07 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:36:21 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:36:21 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:36:21 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:36:29 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:41:19 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:41:19 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:41:19 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:41:24 userimpl.go:95: Response user Obj :  {0    test@t.com   }
TRACE: 2017/03/20 18:50:09 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:50:09 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:50:09 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:50:42 Login.go:16: entering login manager...
TRACE: 2017/03/20 18:50:42 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 18:50:42 userimpl.go:73: Executing query..
TRACE: 2017/03/20 18:51:08 userimpl.go:95: Response user Obj :  {0    testuser@rpqbl.com  Sweta1 }
TRACE: 2017/03/20 18:51:08 userimpl.go:95: Response user Obj :  {0    testuser@rpqbl.com  Sweta1 }
TRACE: 2017/03/20 18:51:08 Login.go:37: Error 1146: Table 'rpqbmysql.Token' doesn't exist
TRACE: 2017/03/20 18:51:08 Login.go:48: {1 Sweta CUEXThQNpUMQgXAQjGAK Admin}
TRACE: 2017/03/20 18:51:09 Login.go:37: Error 1146: Table 'rpqbmysql.Token' doesn't exist
TRACE: 2017/03/20 18:51:09 Login.go:48: {1 Sweta IWIyLyTGKuSEjAYtAmfy Admin}
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 19:28:33 debug.go:45: [GIN-debug] Listening and serving HTTP on :7082
TRACE: 2017/03/20 19:46:06 Login.go:16: entering login manager...
TRACE: 2017/03/20 19:46:06 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 19:46:07 userimpl.go:73: Executing query..
TRACE: 2017/03/20 19:46:12 userimpl.go:95: Response user Obj :  {0    r.s@r.com  123 }
TRACE: 2017/03/20 19:46:52 Login.go:16: entering login manager...
TRACE: 2017/03/20 19:46:52 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 19:46:52 userimpl.go:73: Executing query..
TRACE: 2017/03/20 19:47:00 userimpl.go:95: Response user Obj :  {0    r.s@r.com  123 }
TRACE: 2017/03/20 19:55:27 Login.go:16: entering login manager...
TRACE: 2017/03/20 19:55:27 userimpl.go:71: entering AuthenticateUser Impl
TRACE: 2017/03/20 19:55:27 userimpl.go:73: Executing query..
TRACE: 2017/03/20 19:55:40 userimpl.go:95: Response user Obj :  {0    r.s@r.com  123 }
TRACE: 2017/03/20 19:55:41 Login.go:37: Error 1146: Table 'rpqbmysql.Token' doesn't exist
TRACE: 2017/03/20 19:55:41 Login.go:48: {2 Risabh LEBhPPvsJkwnpGJXTfFH user}
=======
TRACE: 2017/03/18 17:10:11 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
<<<<<<< HEAD
TRACE: 2017/03/18 17:10:11 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
>>>>>>> 17fdb08a1980373dbb70bf30e138139a618b50e6
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 09:17:23 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 09:44:09 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] POST   /login                    --> OnlineTestGo/webservice.Login (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 11:15:29 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
=======
TRACE: 2017/03/18 17:10:11 debug.go:45: [GIN-debug] Listening and serving HTTP on :8
TRACE: 2017/03/18 21:29:36 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/18 21:29:36 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/18 21:29:36 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
06
<<<<<<< HEAD
TRACE: 2017/03/20 15:10:34 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:10:34 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 15:10:34 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 15:10:34 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:10:34 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 15:14:46 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:14:46 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 15:14:46 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 15:14:46 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:14:46 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 15:22:49 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:22:49 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 15:22:49 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 15:22:49 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:22:49 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 15:26:48 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:26:48 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 15:26:48 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 15:26:48 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:26:48 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 15:32:11 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:32:11 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 15:32:11 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 15:32:11 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:32:11 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 15:35:18 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:35:18 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 15:35:18 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 15:35:18 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:47:18 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:47:18 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 15:47:18 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:47:23 QuestionList.go:17: 
TRACE: 2017/03/20 15:47:23 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 15:47:23 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 15:47:23 aunthenticate.go:36: 
TRACE: 2017/03/20 15:47:23 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 15:47:23 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 15:47:31 authenticatetokenimpl.go:53: No uid with that token.
TRACE: 2017/03/20 15:47:31 authenticatetokenimpl.go:62:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 15:47:31 aunthenticate.go:44: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 15:47:31 aunthenticate.go:47: Monday, 20-Mar-17 15:47:31 IST
TRACE: 2017/03/20 15:47:31 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 15:47:31 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 15:47:31 IST" as "2006"
TRACE: 2017/03/20 15:47:31 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 15:47:31 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 15:47:31 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 15:47:31 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 15:47:32 authenticatetokenimpl.go:33: {0xc0421b8a10 0xc042135af0}
TRACE: 2017/03/20 15:47:32 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 15:47:32 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 15:47:32 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 15:47:33 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 16:00:25 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 16:00:25 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 16:00:25 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 16:02:20 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 16:02:20 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 16:02:20 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 16:03:07 QuestionList.go:16: java
TRACE: 2017/03/20 16:03:07 QuestionList.go:17: 
TRACE: 2017/03/20 16:03:07 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:03:07 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:03:07 aunthenticate.go:36: 
TRACE: 2017/03/20 16:03:07 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:03:07 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:03:07 authenticatetokenimpl.go:53: No uid with that token.
TRACE: 2017/03/20 16:03:07 authenticatetokenimpl.go:62:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:03:07 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:03:07 aunthenticate.go:47: Monday, 20-Mar-17 16:03:07 IST
TRACE: 2017/03/20 16:03:07 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 16:03:07 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 16:03:07 IST" as "2006"
TRACE: 2017/03/20 16:03:07 aunthenticate.go:56: 0s
TRACE: 2017/03/20 16:03:07 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 16:03:07 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 16:03:07 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 16:03:08 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 16:03:08 authenticatetokenimpl.go:33: {0xc0421ea070 0xc0421e8070}
TRACE: 2017/03/20 16:03:08 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 16:03:08 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:03:08 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 16:03:09 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 16:18:03 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 16:18:03 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 16:18:03 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 16:18:20 QuestionList.go:16: java
TRACE: 2017/03/20 16:18:20 QuestionList.go:17: 
TRACE: 2017/03/20 16:18:20 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:18:20 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:18:20 aunthenticate.go:36: 
TRACE: 2017/03/20 16:18:20 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:18:20 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:18:25 authenticatetokenimpl.go:53: No uid with that token.
TRACE: 2017/03/20 16:18:25 authenticatetokenimpl.go:62:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:18:25 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:18:25 aunthenticate.go:47: Monday, 20-Mar-17 16:18:25 IST
TRACE: 2017/03/20 16:18:25 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 16:18:25 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 16:18:25 IST" as "2006"
TRACE: 2017/03/20 16:18:25 aunthenticate.go:56: 0s
TRACE: 2017/03/20 16:18:25 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 16:18:25 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 16:18:25 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 16:18:26 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 16:18:26 authenticatetokenimpl.go:33: {0xc0421f0230 0xc0421ee240}
TRACE: 2017/03/20 16:18:26 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 16:18:26 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:18:26 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 16:18:53 QuestionList.go:16: java
TRACE: 2017/03/20 16:18:53 QuestionList.go:17: 
TRACE: 2017/03/20 16:18:53 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:18:53 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:18:53 aunthenticate.go:36: 
TRACE: 2017/03/20 16:18:53 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:18:53 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:19:26 QuestionList.go:16: java
TRACE: 2017/03/20 16:19:26 QuestionList.go:17: 
TRACE: 2017/03/20 16:19:26 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:19:26 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:19:26 aunthenticate.go:36: 
TRACE: 2017/03/20 16:19:26 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:19:26 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:19:27 authenticatetokenimpl.go:53: No uid with that token.
TRACE: 2017/03/20 16:19:27 authenticatetokenimpl.go:62:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:19:27 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:19:27 aunthenticate.go:47: Monday, 20-Mar-17 16:19:27 IST
TRACE: 2017/03/20 16:19:27 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 16:19:27 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 16:19:27 IST" as "2006"
TRACE: 2017/03/20 16:19:27 aunthenticate.go:56: 0s
TRACE: 2017/03/20 16:19:27 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 16:19:27 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 16:19:27 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 16:19:27 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 16:19:27 authenticatetokenimpl.go:53: No uid with that token.
TRACE: 2017/03/20 16:19:27 authenticatetokenimpl.go:62:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:19:27 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:19:27 aunthenticate.go:47: Monday, 20-Mar-17 16:19:27 IST
TRACE: 2017/03/20 16:19:27 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 16:19:27 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 16:19:27 IST" as "2006"
TRACE: 2017/03/20 16:19:27 aunthenticate.go:56: 0s
TRACE: 2017/03/20 16:19:27 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 16:19:27 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 16:19:27 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 16:19:27 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 16:19:28 authenticatetokenimpl.go:33: {0xc0421a6af0 0xc0421ee390}
TRACE: 2017/03/20 16:19:28 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 16:19:28 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:19:28 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 16:20:04 QuestionList.go:16: java
TRACE: 2017/03/20 16:20:04 QuestionList.go:17: 
TRACE: 2017/03/20 16:20:04 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:20:04 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:20:04 aunthenticate.go:36: 
TRACE: 2017/03/20 16:20:04 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:20:04 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:20:12 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 16:20:16 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 16:20:16 authenticatetokenimpl.go:33: {0xc0422204d0 0xc0421bdc60}
TRACE: 2017/03/20 16:20:16 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 16:20:16 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:20:16 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 16:20:31 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 16:20:36 QuestionList.go:16: java
TRACE: 2017/03/20 16:20:36 QuestionList.go:17: 
TRACE: 2017/03/20 16:20:36 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:20:36 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:20:36 aunthenticate.go:36: 
TRACE: 2017/03/20 16:20:36 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:20:36 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:20:43 authenticatetokenimpl.go:53: No uid with that token.
TRACE: 2017/03/20 16:20:43 authenticatetokenimpl.go:62:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:20:43 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:20:43 aunthenticate.go:47: Monday, 20-Mar-17 16:20:43 IST
TRACE: 2017/03/20 16:20:43 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 16:20:43 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 16:20:43 IST" as "2006"
TRACE: 2017/03/20 16:20:43 aunthenticate.go:56: 0s
TRACE: 2017/03/20 16:20:43 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 16:20:43 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 16:20:43 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 16:20:43 authenticatetokenimpl.go:53: No uid with that token.
TRACE: 2017/03/20 16:20:43 authenticatetokenimpl.go:62:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:20:43 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:20:43 aunthenticate.go:47: Monday, 20-Mar-17 16:20:43 IST
TRACE: 2017/03/20 16:20:43 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 16:20:43 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 16:20:43 IST" as "2006"
TRACE: 2017/03/20 16:20:43 aunthenticate.go:56: 0s
TRACE: 2017/03/20 16:20:43 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 16:20:43 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 16:20:43 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 16:20:44 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 16:20:44 authenticatetokenimpl.go:33: {0xc0421a6e00 0xc04225e7a0}
TRACE: 2017/03/20 16:20:44 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 16:20:44 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:20:44 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 16:20:44 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 16:20:44 authenticatetokenimpl.go:33: {0xc0421a6e70 0xc04225e8d0}
TRACE: 2017/03/20 16:20:44 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 16:20:44 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:20:44 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 16:20:45 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 16:20:45 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 16:23:23 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 16:23:23 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 16:23:23 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 16:23:28 QuestionList.go:16: java
TRACE: 2017/03/20 16:23:28 QuestionList.go:17: 
TRACE: 2017/03/20 16:23:28 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:23:28 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:23:28 aunthenticate.go:36: 
TRACE: 2017/03/20 16:23:28 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:23:28 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:23:40 authenticatetokenimpl.go:53: No uid with that token.
TRACE: 2017/03/20 16:23:40 authenticatetokenimpl.go:62:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:23:40 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:23:40 aunthenticate.go:47: Monday, 20-Mar-17 16:23:40 IST
TRACE: 2017/03/20 16:23:40 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 16:23:40 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 16:23:40 IST" as "2006"
TRACE: 2017/03/20 16:23:40 aunthenticate.go:56: 0s
TRACE: 2017/03/20 16:23:40 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 16:23:40 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 16:23:40 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 16:23:40 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 16:23:40 authenticatetokenimpl.go:33: {0xc0420322a0 0xc042004510}
TRACE: 2017/03/20 16:23:40 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 16:23:40 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:23:40 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 16:24:02 QuestionList.go:16: java
TRACE: 2017/03/20 16:24:02 QuestionList.go:17: 
TRACE: 2017/03/20 16:24:02 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:24:02 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:24:02 aunthenticate.go:36: 
TRACE: 2017/03/20 16:24:02 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:24:02 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:24:13 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 16:24:13 authenticatetokenimpl.go:53: No uid with that token.
TRACE: 2017/03/20 16:24:13 authenticatetokenimpl.go:62:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:24:13 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:24:13 aunthenticate.go:47: Monday, 20-Mar-17 16:24:13 IST
TRACE: 2017/03/20 16:24:13 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 16:24:13 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 16:24:13 IST" as "2006"
TRACE: 2017/03/20 16:24:13 aunthenticate.go:56: 0s
TRACE: 2017/03/20 16:24:13 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 16:24:13 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 16:24:13 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 16:24:13 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 16:24:14 authenticatetokenimpl.go:33: {0xc0420324d0 0xc042004910}
TRACE: 2017/03/20 16:24:14 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 16:24:14 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:24:14 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 16:24:15 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 16:27:52 QuestionList.go:16: java
TRACE: 2017/03/20 16:27:52 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 16:27:52 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:27:52 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:27:52 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 16:27:52 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:27:52 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:27:53 authenticatetokenimpl.go:55: sql: Scan error on column index 1: unsupported Scan, storing driver.Value type []uint8 into type *time.Time
TRACE: 2017/03/20 16:28:31 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 16:28:31 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 16:28:31 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 16:28:38 QuestionList.go:16: java
TRACE: 2017/03/20 16:28:38 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 16:28:38 aunthenticate.go:23: parsing time "  20060102060000" as "20060102150405": cannot parse "  20060102060000" as "2006"
TRACE: 2017/03/20 16:28:38 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:28:38 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 16:28:38 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:28:38 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:28:44 authenticatetokenimpl.go:55: sql: Scan error on column index 1: unsupported Scan, storing driver.Value type []uint8 into type *time.Time
TRACE: 2017/03/20 16:35:07 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 16:35:07 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 16:35:07 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 16:35:25 QuestionList.go:16: java
TRACE: 2017/03/20 16:35:25 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 16:35:25 aunthenticate.go:23: parsing time "  Dec 29, 2014 at 6:00am (SGT)" as "Jan 2, 2006 at 3:04am (MST)": cannot parse "  Dec 29, 2014 at 6:00am (SGT)" as "Jan"
TRACE: 2017/03/20 16:35:25 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 16:35:25 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 16:35:25 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 16:35:25 authenticatetokenimpl.go:48: in AunthenticateToken function
TRACE: 2017/03/20 16:35:45 authenticatetokenimpl.go:55: sql: Scan error on column index 1: unsupported Scan, storing driver.Value type []uint8 into type *time.Time
TRACE: 2017/03/20 16:35:45 authenticatetokenimpl.go:62: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:35:45 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:35:45 aunthenticate.go:47: Monday, 20-Mar-17 16:35:45 IST
TRACE: 2017/03/20 16:35:45 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 16:35:45 IST" as "20060102150405": cannot parse "Monday, 20-Mar-17 16:35:45 IST" as "2006"
TRACE: 2017/03/20 16:35:45 aunthenticate.go:56: 0s
TRACE: 2017/03/20 16:35:45 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 16:35:45 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 16:35:45 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 16:35:45 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 16:35:46 authenticatetokenimpl.go:33: {0xc04219cbd0 0xc042119c20}
TRACE: 2017/03/20 16:35:46 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 16:35:46 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 16:35:46 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 16:35:47 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 17:18:27 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 17:18:27 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 17:18:27 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 17:18:32 QuestionList.go:16: java
TRACE: 2017/03/20 17:18:32 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 17:18:32 aunthenticate.go:23: parsing time "  Dec 29, 2014 at 6:00am (SGT)" as "Jan 2, 2006 at 3:04am (MST)": cannot parse "  Dec 29, 2014 at 6:00am (SGT)" as "Jan"
TRACE: 2017/03/20 17:18:32 aunthenticate.go:26: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:18:32 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 17:18:32 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 17:18:32 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 17:18:32 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 17:18:42 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 17:18:42 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:18:42 aunthenticate.go:47: Monday, 20-Mar-17 17:18:42 IST
TRACE: 2017/03/20 17:18:42 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 17:18:42 IST" as "2013-03-27 18:32:45": cannot parse "Monday, 20-Mar-17 17:18:42 IST" as "2"
TRACE: 2017/03/20 17:18:42 aunthenticate.go:56: 0s
TRACE: 2017/03/20 17:18:42 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 17:18:42 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 17:18:42 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 17:19:04 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 17:19:04 authenticatetokenimpl.go:33: {0xc0420322a0 0xc042004510}
TRACE: 2017/03/20 17:19:04 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 17:19:04 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:19:04 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 17:19:05 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 17:23:58 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 17:23:58 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 17:23:58 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 17:24:00 QuestionList.go:16: java
TRACE: 2017/03/20 17:24:00 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 17:24:00 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 17:24:00 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 17:24:00 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 17:24:00 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 17:24:00 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 17:24:09 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 17:24:09 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:24:09 aunthenticate.go:47: Monday, 20-Mar-17 17:24:09 IST
TRACE: 2017/03/20 17:24:09 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 17:24:09 IST" as "2013-03-27 18:32:45": cannot parse "Monday, 20-Mar-17 17:24:09 IST" as "2"
TRACE: 2017/03/20 17:24:09 aunthenticate.go:56: 0s
TRACE: 2017/03/20 17:24:09 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 17:24:09 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 17:24:09 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 17:24:25 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 17:24:25 authenticatetokenimpl.go:33: {0xc0421a28c0 0xc04211f730}
TRACE: 2017/03/20 17:24:25 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 17:24:25 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:24:25 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 17:24:26 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 17:25:33 QuestionList.go:16: java
TRACE: 2017/03/20 17:25:33 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 17:25:33 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 17:25:33 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 17:25:33 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 17:25:33 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 17:25:33 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 17:25:34 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 17:25:34 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:25:34 aunthenticate.go:47: Monday, 20-Mar-17 17:25:34 IST
TRACE: 2017/03/20 17:25:34 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 17:25:34 IST" as "2013-03-27 18:32:45": cannot parse "Monday, 20-Mar-17 17:25:34 IST" as "2"
TRACE: 2017/03/20 17:25:34 aunthenticate.go:56: 0s
TRACE: 2017/03/20 17:25:34 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 17:25:34 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 17:25:34 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 17:25:35 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 17:25:35 authenticatetokenimpl.go:33: {0xc0421f81c0 0xc0421f0240}
TRACE: 2017/03/20 17:25:35 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 17:25:35 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:25:35 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 17:25:36 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 17:35:28 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 17:35:28 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 17:35:28 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 17:35:32 QuestionList.go:16: java
TRACE: 2017/03/20 17:35:32 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 17:35:32 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 17:35:32 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 17:35:32 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 17:35:32 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 17:35:32 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 17:36:11 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 17:36:11 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:36:11 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:36:11 aunthenticate.go:47: Monday, 20-Mar-17 17:36:11 IST
TRACE: 2017/03/20 17:36:11 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 17:36:11 IST" as "2013-03-27 18:32:45": cannot parse "Monday, 20-Mar-17 17:36:11 IST" as "2"
TRACE: 2017/03/20 17:36:11 aunthenticate.go:56: 0s
TRACE: 2017/03/20 17:36:11 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 17:36:11 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 17:36:11 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 17:36:12 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 17:36:12 authenticatetokenimpl.go:33: {0xc0421b8a80 0xc042135d60}
TRACE: 2017/03/20 17:36:12 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 17:36:12 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:36:12 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 17:36:13 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 17:36:13 QuestionList.go:16: java
TRACE: 2017/03/20 17:36:13 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 17:36:13 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 17:36:13 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 17:36:13 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 17:36:13 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 17:36:13 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 17:36:22 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 17:36:22 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:36:22 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:36:22 aunthenticate.go:47: Monday, 20-Mar-17 17:36:22 IST
TRACE: 2017/03/20 17:36:22 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 17:36:22 IST" as "2013-03-27 18:32:45": cannot parse "Monday, 20-Mar-17 17:36:22 IST" as "2"
TRACE: 2017/03/20 17:36:22 aunthenticate.go:56: 0s
TRACE: 2017/03/20 17:36:22 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 17:36:22 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 17:36:22 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 17:36:28 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 17:36:29 authenticatetokenimpl.go:33: {0xc042032460 0xc042004de0}
TRACE: 2017/03/20 17:36:29 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 17:36:29 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:36:29 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 17:36:47 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 17:38:09 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 17:38:09 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 17:38:09 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 17:38:11 QuestionList.go:16: java
TRACE: 2017/03/20 17:38:11 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 17:38:11 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 17:38:11 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 17:38:11 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 17:38:11 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 17:38:11 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 17:38:49 QuestionList.go:16: java
TRACE: 2017/03/20 17:38:49 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 17:38:49 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 17:38:49 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 17:38:49 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 17:38:49 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 17:38:49 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 17:38:55 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 17:38:55 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:38:55 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:38:55 aunthenticate.go:47: Monday, 20-Mar-17 17:38:55 IST
TRACE: 2017/03/20 17:38:55 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 17:38:55 IST" as "2013-03-27 18:32:45": cannot parse "Monday, 20-Mar-17 17:38:55 IST" as "2"
TRACE: 2017/03/20 17:38:55 aunthenticate.go:56: 0s
TRACE: 2017/03/20 17:38:55 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 17:38:55 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 17:38:55 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 17:39:00 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 17:39:00 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:39:00 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:39:00 aunthenticate.go:47: Monday, 20-Mar-17 17:39:00 IST
TRACE: 2017/03/20 17:39:00 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 17:39:00 IST" as "2013-03-27 18:32:45": cannot parse "Monday, 20-Mar-17 17:39:00 IST" as "2"
TRACE: 2017/03/20 17:39:00 aunthenticate.go:56: 0s
TRACE: 2017/03/20 17:39:00 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 17:39:00 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 17:39:00 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 17:39:00 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 17:39:00 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 17:39:01 authenticatetokenimpl.go:33: {0xc0421babd0 0xc042135d20}
TRACE: 2017/03/20 17:39:01 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 17:39:01 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:39:01 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 17:39:01 authenticatetokenimpl.go:33: {0xc0421bab60 0xc042206000}
TRACE: 2017/03/20 17:39:01 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 17:39:01 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 17:39:01 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 17:39:05 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 17:39:32 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 17:51:58 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 17:51:58 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 17:51:58 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:00:23 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:00:23 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:00:23 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:00:23 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 18:01:33 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:01:33 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:01:33 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:02:10 QuestionList.go:16: java
TRACE: 2017/03/20 18:02:10 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:02:10 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 18:02:10 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 18:02:10 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:02:10 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:02:10 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:02:48 QuestionList.go:16: java
TRACE: 2017/03/20 18:02:48 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:02:48 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 18:02:48 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 18:02:48 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:02:48 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:02:48 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:03:21 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:03:21 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:03:21 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:03:21 aunthenticate.go:47: Monday, 20-Mar-17 18:03:21 IST
TRACE: 2017/03/20 18:03:21 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 18:03:21 IST" as "2017-03-20 18:32:45": cannot parse "Monday, 20-Mar-17 18:03:21 IST" as "2"
TRACE: 2017/03/20 18:03:21 aunthenticate.go:56: 0s
TRACE: 2017/03/20 18:03:21 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:03:21 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:03:21 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:03:33 QuestionList.go:16: java
TRACE: 2017/03/20 18:03:33 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:03:33 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 18:03:33 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 18:03:33 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:03:33 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:03:33 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:03:43 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:03:43 authenticatetokenimpl.go:33: {0xc0420321c0 0xc042004340}
TRACE: 2017/03/20 18:03:43 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:03:43 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:03:43 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:03:58 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:03:58 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:03:58 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:03:58 aunthenticate.go:47: Monday, 20-Mar-17 18:03:58 IST
TRACE: 2017/03/20 18:03:58 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 18:03:58 IST" as "2017-03-20 18:32:45": cannot parse "Monday, 20-Mar-17 18:03:58 IST" as "2"
TRACE: 2017/03/20 18:03:58 aunthenticate.go:56: 0s
TRACE: 2017/03/20 18:03:58 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:03:58 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:03:58 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:03:58 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:03:58 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:03:58 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:03:58 aunthenticate.go:47: Monday, 20-Mar-17 18:03:58 IST
TRACE: 2017/03/20 18:03:58 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 18:03:58 IST" as "2017-03-20 18:32:45": cannot parse "Monday, 20-Mar-17 18:03:58 IST" as "2"
TRACE: 2017/03/20 18:03:58 aunthenticate.go:56: 0s
TRACE: 2017/03/20 18:03:58 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:03:58 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:03:58 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:03:59 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:03:59 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:03:59 authenticatetokenimpl.go:33: {0xc0421baa80 0xc0422444c0}
TRACE: 2017/03/20 18:03:59 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:03:59 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:03:59 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:03:59 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:04:00 authenticatetokenimpl.go:33: {0xc0421baaf0 0xc0422445f0}
TRACE: 2017/03/20 18:04:00 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:04:00 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:04:00 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:04:01 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:04:01 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:05:53 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:05:53 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:05:53 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:06:05 QuestionList.go:16: java
TRACE: 2017/03/20 18:06:05 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:06:05 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 18:06:05 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 18:06:05 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:06:05 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:06:05 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:06:40 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:06:40 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:06:40 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:06:40 aunthenticate.go:47: Monday, 20-Mar-17 18:06:40 IST
TRACE: 2017/03/20 18:06:40 aunthenticate.go:51: parsing time "Monday, 20-Mar-17 18:06:40 IST" as "2017-03-20 18:32:45": cannot parse "Monday, 20-Mar-17 18:06:40 IST" as "2"
TRACE: 2017/03/20 18:06:40 aunthenticate.go:54: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:06:40 aunthenticate.go:56: 0s
TRACE: 2017/03/20 18:06:40 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:06:40 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:06:40 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:06:41 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:06:41 authenticatetokenimpl.go:33: {0xc042032230 0xc042004300}
TRACE: 2017/03/20 18:06:41 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:06:41 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:06:41 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:07:14 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:15:18 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:15:18 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:15:18 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:15:21 QuestionList.go:16: java
TRACE: 2017/03/20 18:15:21 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:15:21 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 18:15:21 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 18:15:21 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:15:21 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:15:21 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:15:29 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:15:29 authenticatetokenimpl.go:60: 0000-00-00 00:00:00
TRACE: 2017/03/20 18:15:29 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:15:29 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:15:29 aunthenticate.go:47: 200320-33-03T2020:08:153+00:00
TRACE: 2017/03/20 18:15:29 aunthenticate.go:51: parsing time "200320-33-03T2020:08:153+00:00" as "2017-03-20 18:32:45": cannot parse "20-33-03T2020:08:153+00:00" as "7-"
TRACE: 2017/03/20 18:15:29 aunthenticate.go:54: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:15:29 aunthenticate.go:56: 0s
TRACE: 2017/03/20 18:15:29 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:15:29 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:15:29 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:15:30 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:15:30 authenticatetokenimpl.go:33: {0xc0421ba8c0 0xc042135970}
TRACE: 2017/03/20 18:15:30 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:15:30 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:15:30 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:15:32 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:16:05 QuestionList.go:16: java
TRACE: 2017/03/20 18:16:05 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:16:05 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 18:16:05 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 18:16:05 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:16:05 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:16:05 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:17:01 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:17:01 authenticatetokenimpl.go:60: 0000-00-00 00:00:00
TRACE: 2017/03/20 18:17:01 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:17:01 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:17:01 aunthenticate.go:47: 200320-33-03T2020:08:173+00:00
TRACE: 2017/03/20 18:17:01 aunthenticate.go:51: parsing time "200320-33-03T2020:08:173+00:00" as "2017-03-20 18:32:45": cannot parse "20-33-03T2020:08:173+00:00" as "7-"
TRACE: 2017/03/20 18:17:01 aunthenticate.go:54: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:17:01 aunthenticate.go:56: 0s
TRACE: 2017/03/20 18:17:01 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:17:01 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:17:01 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:17:17 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:17:17 authenticatetokenimpl.go:33: {0xc04222e230 0xc042214420}
TRACE: 2017/03/20 18:17:17 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:17:17 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:17:17 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:17:19 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:22:33 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:22:33 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:22:33 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:22:36 QuestionList.go:16: java
TRACE: 2017/03/20 18:22:36 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:22:36 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 18:22:36 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 18:22:36 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:22:36 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:22:36 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:22:51 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:22:51 authenticatetokenimpl.go:60: 2015-03-20 15:20:45
TRACE: 2017/03/20 18:22:51 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:22:51 aunthenticate.go:44: abcxyz 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:22:51 aunthenticate.go:47: 200320-33-03 2020:08:223
TRACE: 2017/03/20 18:22:51 aunthenticate.go:51: parsing time "200320-33-03 2020:08:223" as "2017-03-20 18:32:45": cannot parse "20-33-03 2020:08:223" as "7-"
TRACE: 2017/03/20 18:22:51 aunthenticate.go:54: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:22:51 aunthenticate.go:56: 0s
TRACE: 2017/03/20 18:22:51 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:22:51 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:22:51 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:23:37 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:23:37 authenticatetokenimpl.go:33: {0xc0421f6070 0xc0421f4070}
TRACE: 2017/03/20 18:23:37 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:23:37 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:23:37 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:24:56 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:41:52 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:41:52 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:41:52 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:43:24 QuestionList.go:16: java
TRACE: 2017/03/20 18:43:24 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:43:24 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 18:43:24 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 18:43:24 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:43:24 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:43:24 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:43:34 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:43:34 authenticatetokenimpl.go:60: 2015-03-20 15:20:45
TRACE: 2017/03/20 18:43:34 authenticatetokenimpl.go:63: 2015-03-20 15:20:45 +0000 UTC
TRACE: 2017/03/20 18:43:34 aunthenticate.go:44: abcxyz 2015-03-20 15:20:45 +0000 UTC
TRACE: 2017/03/20 18:43:34 aunthenticate.go:47: 200320-33-03T2020:08:433
TRACE: 2017/03/20 18:43:34 aunthenticate.go:51: parsing time "200320-33-03T2020:08:433" as "2017-03-20 18:32:45": cannot parse "20-33-03T2020:08:433" as "7-"
TRACE: 2017/03/20 18:43:34 aunthenticate.go:54: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:43:34 aunthenticate.go:56: 2562047h47m16.854775807s
TRACE: 2017/03/20 18:43:34 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:43:34 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:43:34 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:43:35 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:43:35 authenticatetokenimpl.go:33: {0xc0421f2070 0xc0421f0070}
TRACE: 2017/03/20 18:43:35 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:43:35 aunthenticate.go:61: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:43:35 aunthenticate.go:65: calling delete token function
TRACE: 2017/03/20 18:43:35 authenticatetokenimpl.go:71: calling DeleteToken function
TRACE: 2017/03/20 18:43:35 authenticatetokenimpl.go:73: after query execution
TRACE: 2017/03/20 18:43:41 authenticatetokenimpl.go:82: reached to execution
TRACE: 2017/03/20 18:43:41 authenticatetokenimpl.go:84: {0xc0421f21c0 0xc0421f01b0}
TRACE: 2017/03/20 18:43:41 aunthenticate.go:67: true
TRACE: 2017/03/20 18:43:41 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:43:53 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:45:07 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:45:07 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:45:07 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:45:23 QuestionList.go:16: java
TRACE: 2017/03/20 18:45:23 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:45:23 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 18:45:23 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 18:45:23 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:45:23 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:45:23 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:45:39 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 18:45:39 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 18:45:39 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:45:39 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:45:39 aunthenticate.go:47: 2017-03-20 18:45:39
TRACE: 2017/03/20 18:45:39 aunthenticate.go:51: parsing time "2017-03-20 18:45:39": month out of range
TRACE: 2017/03/20 18:45:39 aunthenticate.go:54: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:45:39 aunthenticate.go:56: 0s
TRACE: 2017/03/20 18:45:39 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:45:40 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:53:22 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:53:22 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:53:22 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:53:27 QuestionList.go:16: java
TRACE: 2017/03/20 18:53:27 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:53:27 aunthenticate.go:23: parsing time "Dec 29, 2014 at 6:00:20am (SGT)" as "Jan 2, 2006 at 3:04:20am (MST)": cannot parse "am (SGT)" as "0am ("
TRACE: 2017/03/20 18:53:27 aunthenticate.go:26: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:53:27 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 18:53:27 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:53:27 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:53:27 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:53:31 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:53:31 authenticatetokenimpl.go:60: 2015-01-02 15:04:05
TRACE: 2017/03/20 18:53:31 authenticatetokenimpl.go:63: 2015-01-02 15:04:05 +0000 UTC
TRACE: 2017/03/20 18:53:31 aunthenticate.go:44: abcxyz 2015-01-02 15:04:05 +0000 UTC
TRACE: 2017/03/20 18:53:31 aunthenticate.go:47: 2017-03-20 18:53:31
TRACE: 2017/03/20 18:53:31 aunthenticate.go:54: 2017-03-20 18:53:31 +0000 UTC
TRACE: 2017/03/20 18:53:31 aunthenticate.go:56: -19395h49m26s
TRACE: 2017/03/20 18:53:31 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:53:31 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:53:31 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:53:45 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:53:45 authenticatetokenimpl.go:33: {0xc0421b8a80 0xc042137bb0}
TRACE: 2017/03/20 18:53:45 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:53:45 aunthenticate.go:61: 2017-03-20 18:53:31 +0000 UTC
TRACE: 2017/03/20 18:53:45 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:53:46 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 18:57:50 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:57:50 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:57:50 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:57:52 QuestionList.go:16: java
TRACE: 2017/03/20 18:57:52 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 18:57:52 aunthenticate.go:23: parsing time "Dec 29, 2014 at 6:00:20am (SGT)" as "Jan 2, 2006 at 3:04:20am (MST)": cannot parse "am (SGT)" as "0am ("
TRACE: 2017/03/20 18:57:52 aunthenticate.go:26: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 18:57:52 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 18:57:52 aunthenticate.go:36: abcxyz
TRACE: 2017/03/20 18:57:52 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 18:57:52 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 18:57:57 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 18:57:57 authenticatetokenimpl.go:60: 2017-03-20 18:53:31
TRACE: 2017/03/20 18:57:57 authenticatetokenimpl.go:63: 2017-03-20 18:53:31 +0000 UTC
TRACE: 2017/03/20 18:57:57 aunthenticate.go:44: abcxyz 2017-03-20 18:53:31 +0000 UTC
TRACE: 2017/03/20 18:57:57 aunthenticate.go:47: 2017-03-20 18:57:57
TRACE: 2017/03/20 18:57:57 aunthenticate.go:54: 2017-03-20 18:57:57 +0000 UTC
TRACE: 2017/03/20 18:57:57 aunthenticate.go:56: -4m26s
TRACE: 2017/03/20 18:57:57 aunthenticate.go:59: calling modifyfunction
TRACE: 2017/03/20 18:57:57 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 18:57:57 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 18:57:58 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 18:57:58 authenticatetokenimpl.go:33: {0xc0420322a0 0xc042004580}
TRACE: 2017/03/20 18:57:58 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 18:57:58 aunthenticate.go:61: 2017-03-20 18:57:57 +0000 UTC
TRACE: 2017/03/20 18:57:58 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:58:51 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 19:02:47 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 19:02:47 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 19:02:47 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 19:03:27 QuestionList.go:16: java
TRACE: 2017/03/20 19:03:27 QuestionList.go:17: abcxy
TRACE: 2017/03/20 19:03:27 aunthenticate.go:23: parsing time "Dec 29, 2014 at 6:00:00am (SGT)" as "Jan 2, 2006 at 3:04:20am (MST)": cannot parse "am (SGT)" as "0am ("
TRACE: 2017/03/20 19:03:27 aunthenticate.go:26: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:03:27 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 19:03:27 aunthenticate.go:36: abcxy
TRACE: 2017/03/20 19:03:27 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 19:03:27 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 19:03:40 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 19:03:40 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 19:03:40 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:03:40 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:03:40 aunthenticate.go:47: 2017-03-20 19:03:40
TRACE: 2017/03/20 19:03:40 aunthenticate.go:54: 2017-03-20 19:03:40 +0000 UTC
TRACE: 2017/03/20 19:03:40 aunthenticate.go:56: -2562047h47m16.854775808s
TRACE: 2017/03/20 19:03:40 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 19:03:41 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 19:05:45 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 19:05:45 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 19:05:45 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 19:05:53 QuestionList.go:16: java
TRACE: 2017/03/20 19:05:53 QuestionList.go:17: abcxy
TRACE: 2017/03/20 19:05:53 aunthenticate.go:23: parsing time "Dec 29, 2014 at 6:00:00am (SGT)" as "Jan 2, 2006 at 3:04:20am (MST)": cannot parse "am (SGT)" as "0am ("
TRACE: 2017/03/20 19:05:53 aunthenticate.go:26: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:05:53 aunthenticate.go:28: 0 0 0
TRACE: 2017/03/20 19:05:53 aunthenticate.go:36: abcxy
TRACE: 2017/03/20 19:05:53 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 19:05:53 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 19:06:14 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 19:06:14 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 19:06:14 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:06:14 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:06:14 aunthenticate.go:47: 2017-03-20 19:06:14
TRACE: 2017/03/20 19:06:14 aunthenticate.go:54: 2017-03-20 19:06:14 +0000 UTC
TRACE: 2017/03/20 19:06:14 aunthenticate.go:56: -2562047h47m16.854775808s
TRACE: 2017/03/20 19:06:14 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 19:06:23 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 19:11:00 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 19:11:00 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 19:11:00 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 19:11:13 QuestionList.go:16: java
TRACE: 2017/03/20 19:11:13 QuestionList.go:17: abcxy
TRACE: 2017/03/20 19:11:13 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 19:11:13 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 19:11:13 aunthenticate.go:36: abcxy
TRACE: 2017/03/20 19:11:13 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 19:11:13 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 19:11:36 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 19:11:36 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 19:11:36 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:11:36 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:11:36 aunthenticate.go:47: 2017-03-20 19:11:36
TRACE: 2017/03/20 19:11:36 aunthenticate.go:54: 2017-03-20 19:11:36 +0000 UTC
TRACE: 2017/03/20 19:11:36 aunthenticate.go:56: -2562047h47m16.854775808s
TRACE: 2017/03/20 19:11:36 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 19:11:37 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 19:12:28 QuestionList.go:16: java
TRACE: 2017/03/20 19:12:28 QuestionList.go:17: ab
TRACE: 2017/03/20 19:12:28 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 19:12:28 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 19:12:28 aunthenticate.go:36: ab
TRACE: 2017/03/20 19:12:28 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 19:12:28 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 19:12:40 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 19:12:40 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 19:12:40 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:12:40 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:12:40 aunthenticate.go:47: 2017-03-20 19:12:40
TRACE: 2017/03/20 19:12:40 aunthenticate.go:54: 2017-03-20 19:12:40 +0000 UTC
TRACE: 2017/03/20 19:12:40 aunthenticate.go:56: -2562047h47m16.854775808s
TRACE: 2017/03/20 19:12:40 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 19:12:54 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 19:15:27 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 19:15:27 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 19:15:27 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 19:16:05 QuestionList.go:16: java
TRACE: 2017/03/20 19:16:05 QuestionList.go:17: ab
TRACE: 2017/03/20 19:16:05 aunthenticate.go:26: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 19:16:05 aunthenticate.go:28: 6 0 0
TRACE: 2017/03/20 19:16:05 aunthenticate.go:36: ab
TRACE: 2017/03/20 19:16:05 aunthenticate.go:42: calling  daoimpl
TRACE: 2017/03/20 19:16:05 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 19:16:10 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 19:16:10 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 19:16:10 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:16:10 aunthenticate.go:44:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:16:10 aunthenticate.go:47: 2017-03-20 19:16:10
TRACE: 2017/03/20 19:16:10 aunthenticate.go:54: 2017-03-20 19:16:10 +0000 UTC
TRACE: 2017/03/20 19:16:10 aunthenticate.go:56: -2562047h47m16.854775808s
TRACE: 2017/03/20 19:16:10 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 19:16:11 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 19:51:22 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 19:51:22 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 19:51:22 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 19:51:24 QuestionList.go:16: java
TRACE: 2017/03/20 19:51:24 QuestionList.go:17: ab
TRACE: 2017/03/20 19:51:24 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 19:51:24 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 19:51:24 aunthenticate.go:32: ab
TRACE: 2017/03/20 19:51:24 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 19:51:24 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 19:51:43 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 19:51:43 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 19:51:43 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:51:43 aunthenticate.go:38:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:51:43 aunthenticate.go:41: 2017-03-20 19:51:43
TRACE: 2017/03/20 19:51:43 aunthenticate.go:48: 2017-03-20 19:51:43 +0000 UTC
TRACE: 2017/03/20 19:51:43 aunthenticate.go:50: 2562047h47m16.854775807s
TRACE: 2017/03/20 19:51:43 aunthenticate.go:59: calling delete token function
TRACE: 2017/03/20 19:51:43 authenticatetokenimpl.go:71: calling DeleteToken function
TRACE: 2017/03/20 19:51:43 authenticatetokenimpl.go:73: after query execution
TRACE: 2017/03/20 19:51:44 authenticatetokenimpl.go:82: reached to execution
TRACE: 2017/03/20 19:51:44 authenticatetokenimpl.go:84: {0xc0420320e0 0xc042004350}
TRACE: 2017/03/20 19:51:44 aunthenticate.go:61: true
TRACE: 2017/03/20 19:51:44 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 19:51:45 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 19:52:15 QuestionList.go:16: java
TRACE: 2017/03/20 19:52:15 QuestionList.go:17: ab
TRACE: 2017/03/20 19:52:15 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 19:52:15 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 19:52:15 aunthenticate.go:32: ab
TRACE: 2017/03/20 19:52:15 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 19:52:15 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 19:53:12 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 19:53:12 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 19:53:12 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:53:12 aunthenticate.go:38:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:53:12 aunthenticate.go:41: 2017-03-20 19:53:12
TRACE: 2017/03/20 19:53:12 aunthenticate.go:48: 2017-03-20 19:53:12 +0000 UTC
TRACE: 2017/03/20 19:53:12 aunthenticate.go:50: 2562047h47m16.854775807s
TRACE: 2017/03/20 19:53:12 aunthenticate.go:59: calling delete token function
TRACE: 2017/03/20 19:53:12 authenticatetokenimpl.go:71: calling DeleteToken function
TRACE: 2017/03/20 19:53:12 authenticatetokenimpl.go:73: after query execution
TRACE: 2017/03/20 19:53:13 authenticatetokenimpl.go:82: reached to execution
TRACE: 2017/03/20 19:53:13 authenticatetokenimpl.go:84: {0xc0421ba930 0xc042137b80}
TRACE: 2017/03/20 19:53:13 aunthenticate.go:61: true
TRACE: 2017/03/20 19:53:13 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 19:53:14 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 19:53:17 QuestionList.go:16: java
TRACE: 2017/03/20 19:53:17 QuestionList.go:17: ab
TRACE: 2017/03/20 19:53:17 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 19:53:17 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 19:53:17 aunthenticate.go:32: ab
TRACE: 2017/03/20 19:53:17 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 19:53:17 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 19:53:33 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 19:53:33 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 19:53:33 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:53:33 aunthenticate.go:38:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 19:53:33 aunthenticate.go:41: 2017-03-20 19:53:33
TRACE: 2017/03/20 19:53:33 aunthenticate.go:48: 2017-03-20 19:53:33 +0000 UTC
TRACE: 2017/03/20 19:53:33 aunthenticate.go:50: 2562047h47m16.854775807s
TRACE: 2017/03/20 19:53:33 aunthenticate.go:59: calling delete token function
TRACE: 2017/03/20 19:53:33 authenticatetokenimpl.go:71: calling DeleteToken function
TRACE: 2017/03/20 19:53:33 authenticatetokenimpl.go:73: after query execution
TRACE: 2017/03/20 19:53:45 authenticatetokenimpl.go:82: reached to execution
TRACE: 2017/03/20 19:53:45 authenticatetokenimpl.go:84: {0xc0420325b0 0xc042005130}
TRACE: 2017/03/20 19:53:45 aunthenticate.go:61: true
TRACE: 2017/03/20 19:53:45 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 19:53:46 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 20:05:15 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:05:15 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:05:15 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 20:05:17 QuestionList.go:16: java
TRACE: 2017/03/20 20:05:17 QuestionList.go:17: ab
TRACE: 2017/03/20 20:05:17 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:05:17 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:05:17 aunthenticate.go:32: ab
TRACE: 2017/03/20 20:05:17 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:05:17 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:05:48 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 20:05:48 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 20:05:48 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 20:05:48 aunthenticate.go:38:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 20:05:49 QuestionList.go:16: java
TRACE: 2017/03/20 20:05:49 QuestionList.go:17: ab
TRACE: 2017/03/20 20:05:49 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:05:49 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:05:49 aunthenticate.go:32: ab
TRACE: 2017/03/20 20:05:49 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:05:49 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:06:17 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 20:06:17 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 20:06:17 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 20:06:17 aunthenticate.go:38:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 20:13:51 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:13:51 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:13:51 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 20:14:01 QuestionList.go:16: java
TRACE: 2017/03/20 20:14:01 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:14:01 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:14:01 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:14:01 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:14:01 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:14:01 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:14:35 QuestionList.go:16: java
TRACE: 2017/03/20 20:14:35 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:14:35 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:14:35 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:14:35 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:14:35 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:14:35 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:60: 2017-03-20 18:57:57
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:63: 2017-03-20 18:57:57 +0000 UTC
TRACE: 2017/03/20 20:14:50 aunthenticate.go:38: abcxyz 2017-03-20 18:57:57 +0000 UTC
TRACE: 2017/03/20 20:14:50 aunthenticate.go:44: 2017-03-20 20:14:50
TRACE: 2017/03/20 20:14:50 aunthenticate.go:51: 2017-03-20 20:14:50 +0000 UTC
TRACE: 2017/03/20 20:14:50 aunthenticate.go:54: 4
TRACE: 2017/03/20 20:14:50 aunthenticate.go:57: calling modifyfunction
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:60: 2017-03-20 18:57:57
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:63: 2017-03-20 18:57:57 +0000 UTC
TRACE: 2017/03/20 20:14:50 aunthenticate.go:38: abcxyz 2017-03-20 18:57:57 +0000 UTC
TRACE: 2017/03/20 20:14:50 aunthenticate.go:44: 2017-03-20 20:14:50
TRACE: 2017/03/20 20:14:50 aunthenticate.go:51: 2017-03-20 20:14:50 +0000 UTC
TRACE: 2017/03/20 20:14:50 aunthenticate.go:54: 4
TRACE: 2017/03/20 20:14:50 aunthenticate.go:57: calling modifyfunction
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 20:14:50 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 20:14:51 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 20:14:51 authenticatetokenimpl.go:33: {0xc0422280e0 0xc0420044c0}
TRACE: 2017/03/20 20:14:51 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 20:14:51 aunthenticate.go:59: 2017-03-20 20:14:50 +0000 UTC
TRACE: 2017/03/20 20:14:51 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 20:14:51 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 20:14:51 authenticatetokenimpl.go:33: {0xc0422281c0 0xc042135940}
TRACE: 2017/03/20 20:14:51 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 20:14:51 aunthenticate.go:59: 2017-03-20 20:14:50 +0000 UTC
TRACE: 2017/03/20 20:14:51 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 20:15:27 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 20:15:42 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 20:17:08 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:17:08 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:17:08 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 20:17:11 QuestionList.go:16: java
TRACE: 2017/03/20 20:17:11 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:17:11 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:17:11 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:17:11 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:17:11 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:17:11 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:17:44 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 20:17:44 authenticatetokenimpl.go:60: 2017-03-20 20:14:50
TRACE: 2017/03/20 20:17:44 authenticatetokenimpl.go:63: 2017-03-20 20:14:50 +0000 UTC
TRACE: 2017/03/20 20:17:44 aunthenticate.go:38: abcxyz 2017-03-20 20:14:50 +0000 UTC
TRACE: 2017/03/20 20:17:44 aunthenticate.go:44: 2017-03-20 20:17:44
TRACE: 2017/03/20 20:17:44 aunthenticate.go:51: 2017-03-20 20:17:44 +0000 UTC
TRACE: 2017/03/20 20:17:44 aunthenticate.go:53: 2m54s
TRACE: 2017/03/20 20:17:44 aunthenticate.go:55: 21
TRACE: 2017/03/20 20:17:44 aunthenticate.go:58: calling modifyfunction
TRACE: 2017/03/20 20:17:44 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 20:17:44 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 20:17:45 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 20:17:45 authenticatetokenimpl.go:33: {0xc0420320e0 0xc042004150}
TRACE: 2017/03/20 20:17:45 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 20:17:45 aunthenticate.go:60: 2017-03-20 20:17:44 +0000 UTC
TRACE: 2017/03/20 20:17:45 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 20:17:46 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 20:18:11 QuestionList.go:16: java
TRACE: 2017/03/20 20:18:11 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:18:11 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:18:11 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:18:11 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:18:11 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:18:11 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:18:19 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 20:18:19 authenticatetokenimpl.go:60: 2017-03-20 20:17:44
TRACE: 2017/03/20 20:18:19 authenticatetokenimpl.go:63: 2017-03-20 20:17:44 +0000 UTC
TRACE: 2017/03/20 20:18:19 aunthenticate.go:38: abcxyz 2017-03-20 20:17:44 +0000 UTC
TRACE: 2017/03/20 20:18:19 aunthenticate.go:44: 2017-03-20 20:18:19
TRACE: 2017/03/20 20:18:19 aunthenticate.go:51: 2017-03-20 20:18:19 +0000 UTC
TRACE: 2017/03/20 20:18:19 aunthenticate.go:53: 35s
TRACE: 2017/03/20 20:18:19 aunthenticate.go:55: 2
TRACE: 2017/03/20 20:18:19 aunthenticate.go:58: calling modifyfunction
TRACE: 2017/03/20 20:18:19 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 20:18:19 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 20:18:20 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 20:18:21 authenticatetokenimpl.go:33: {0xc042032460 0xc042004d50}
TRACE: 2017/03/20 20:18:21 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 20:18:21 aunthenticate.go:60: 2017-03-20 20:18:19 +0000 UTC
TRACE: 2017/03/20 20:18:21 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 20:19:19 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 20:20:38 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:20:38 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:20:38 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 20:20:44 QuestionList.go:16: java
TRACE: 2017/03/20 20:20:44 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:20:44 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:20:44 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:20:44 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:20:44 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:20:44 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:21:19 QuestionList.go:16: java
TRACE: 2017/03/20 20:21:19 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:21:19 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:21:19 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:21:19 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:21:19 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:21:19 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:60: 2017-03-20 20:18:19
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:63: 2017-03-20 20:18:19 +0000 UTC
TRACE: 2017/03/20 20:21:32 aunthenticate.go:38: abcxyz 2017-03-20 20:18:19 +0000 UTC
TRACE: 2017/03/20 20:21:32 aunthenticate.go:44: 2017-03-20 20:21:32
TRACE: 2017/03/20 20:21:32 aunthenticate.go:51: 2017-03-20 20:21:32 +0000 UTC
TRACE: 2017/03/20 20:21:32 aunthenticate.go:53: 3m13s
TRACE: 2017/03/20 20:21:32 aunthenticate.go:55: 53611
TRACE: 2017/03/20 20:21:32 aunthenticate.go:58: calling modifyfunction
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:60: 2017-03-20 20:18:19
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:63: 2017-03-20 20:18:19 +0000 UTC
TRACE: 2017/03/20 20:21:32 aunthenticate.go:38: abcxyz 2017-03-20 20:18:19 +0000 UTC
TRACE: 2017/03/20 20:21:32 aunthenticate.go:44: 2017-03-20 20:21:32
TRACE: 2017/03/20 20:21:32 aunthenticate.go:51: 2017-03-20 20:21:32 +0000 UTC
TRACE: 2017/03/20 20:21:32 aunthenticate.go:53: 3m13s
TRACE: 2017/03/20 20:21:32 aunthenticate.go:55: 53611
TRACE: 2017/03/20 20:21:32 aunthenticate.go:58: calling modifyfunction
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 20:21:32 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 20:21:33 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 20:21:33 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 20:21:33 authenticatetokenimpl.go:33: {0xc0421ba930 0xc042137bc0}
TRACE: 2017/03/20 20:21:33 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 20:21:33 aunthenticate.go:60: 2017-03-20 20:21:32 +0000 UTC
TRACE: 2017/03/20 20:21:33 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 20:21:33 authenticatetokenimpl.go:33: {0xc0421ba9a0 0xc042137c80}
TRACE: 2017/03/20 20:21:33 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 20:21:33 aunthenticate.go:60: 2017-03-20 20:21:32 +0000 UTC
TRACE: 2017/03/20 20:21:33 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 20:21:34 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 20:21:34 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 20:30:32 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:30:32 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:30:32 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 20:30:36 QuestionList.go:16: java
TRACE: 2017/03/20 20:30:36 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:30:36 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:30:36 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:30:36 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:30:36 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:30:36 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:31:10 QuestionList.go:16: java
TRACE: 2017/03/20 20:31:10 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:31:10 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:31:10 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:31:10 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:31:10 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:31:10 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:60: 2017-03-20 20:21:32
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:63: 2017-03-20 20:21:32 +0000 UTC
TRACE: 2017/03/20 20:31:19 aunthenticate.go:38: abcxyz 2017-03-20 20:21:32 +0000 UTC
TRACE: 2017/03/20 20:31:19 aunthenticate.go:44: 2017-03-20 20:31:19
TRACE: 2017/03/20 20:31:19 aunthenticate.go:51: 2017-03-20 20:31:19 +0000 UTC
TRACE: 2017/03/20 20:31:19 aunthenticate.go:53: 9m47s
TRACE: 2017/03/20 20:31:19 aunthenticate.go:55: 163055
TRACE: 2017/03/20 20:31:19 aunthenticate.go:58: calling modifyfunction
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:58: Type is abcxyz
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:60: 2017-03-20 20:21:32
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:63: 2017-03-20 20:21:32 +0000 UTC
TRACE: 2017/03/20 20:31:19 aunthenticate.go:38: abcxyz 2017-03-20 20:21:32 +0000 UTC
TRACE: 2017/03/20 20:31:19 aunthenticate.go:44: 2017-03-20 20:31:19
TRACE: 2017/03/20 20:31:19 aunthenticate.go:51: 2017-03-20 20:31:19 +0000 UTC
TRACE: 2017/03/20 20:31:19 aunthenticate.go:53: 9m47s
TRACE: 2017/03/20 20:31:19 aunthenticate.go:55: 163055
TRACE: 2017/03/20 20:31:19 aunthenticate.go:58: calling modifyfunction
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:20: In modifyfunction
TRACE: 2017/03/20 20:31:19 authenticatetokenimpl.go:22: after query execution
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:31: reached to modifyexecution
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:33: {0xc04221c3f0 0xc0421f2690}
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 20:31:21 aunthenticate.go:60: 2017-03-20 20:31:19 +0000 UTC
TRACE: 2017/03/20 20:31:21 aunthenticate.go:64: calling delete token function
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:71: calling DeleteToken function
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:73: after query execution
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:33: {0xc04221c460 0xc042004330}
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:38: 0 <nil>
TRACE: 2017/03/20 20:31:21 aunthenticate.go:60: 2017-03-20 20:31:19 +0000 UTC
TRACE: 2017/03/20 20:31:21 aunthenticate.go:64: calling delete token function
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:71: calling DeleteToken function
TRACE: 2017/03/20 20:31:21 authenticatetokenimpl.go:73: after query execution
TRACE: 2017/03/20 20:31:22 authenticatetokenimpl.go:82: reached to execution
TRACE: 2017/03/20 20:31:22 authenticatetokenimpl.go:82: reached to execution
TRACE: 2017/03/20 20:31:23 authenticatetokenimpl.go:84: {0xc0421ba9a0 0xc042137ac0}
TRACE: 2017/03/20 20:31:23 aunthenticate.go:66: true
TRACE: 2017/03/20 20:31:23 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 20:31:23 authenticatetokenimpl.go:84: {0xc0421baa10 0xc042137b70}
TRACE: 2017/03/20 20:31:23 aunthenticate.go:66: true
TRACE: 2017/03/20 20:31:23 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 20:32:03 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 20:32:03 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 20:34:26 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:34:26 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:34:26 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 20:34:57 QuestionList.go:16: java
TRACE: 2017/03/20 20:34:57 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:34:57 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:34:57 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:34:57 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:34:57 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:34:57 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:35:07 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 20:35:07 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 20:35:07 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 20:35:07 aunthenticate.go:38:  0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 20:38:17 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:38:17 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:38:17 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 20:38:21 QuestionList.go:16: 
TRACE: 2017/03/20 20:38:21 QuestionList.go:17: abcxyz
TRACE: 2017/03/20 20:38:21 aunthenticate.go:22: 2014-12-29 06:00:00 +0000 SGT
TRACE: 2017/03/20 20:38:21 aunthenticate.go:24: 6 0 0
TRACE: 2017/03/20 20:38:21 aunthenticate.go:32: abcxyz
TRACE: 2017/03/20 20:38:21 aunthenticate.go:36: calling  daoimpl
TRACE: 2017/03/20 20:38:21 authenticatetokenimpl.go:49: in AunthenticateToken function
TRACE: 2017/03/20 20:38:40 authenticatetokenimpl.go:54: No uid with that token.
TRACE: 2017/03/20 20:38:40 authenticatetokenimpl.go:60: 
TRACE: 2017/03/20 20:38:40 authenticatetokenimpl.go:63: 0001-01-01 00:00:00 +0000 UTC
TRACE: 2017/03/20 20:38:40 aunthenticate.go:38:  0001-01-01 00:00:00 +0000 UTC
=======
>>>>>>> 18705118fb062920bb265ed2a6de83022e614ba3
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 12:06:53 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
>>>>>>> a3feecc5d30378336fc8c7e14413ed46e876d668
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 12:25:41 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 13:06:15 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:15:01 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 15:15:33 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 15:15:43 questionimpl.go:40: totalquestions: []
TRACE: 2017/03/20 15:15:43 questionimpl.go:40: totalquestions: []
TRACE: 2017/03/20 15:23:24 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 15:24:07 questionimpl.go:40: totalquestions: []
TRACE: 2017/03/20 15:27:07 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 15:27:35 questionimpl.go:40: totalquestions: [{1 which of these handles the exception when no catch is used? default handler} {1 which of these handles the exception when no catch is used? finally} {1 which of these handles the exception when no catch is used? throw handler} {1 which of these handles the exception when no catch is used? java runtime system} {2 which of these methods are used to implement runable interface? stop()} {2 which of these methods are used to implement runable interface? start()} {2 which of these methods are used to implement runable interface? runThread()} {2 which of these methods are used to implement runable interface? stopThread()} {7 which keyword is used by method to refer to object that invoked it? import} {7 which keyword is used by method to refer to object that invoked it? catch} {7 which keyword is used by method to refer to object that invoked it? abstract} {7 which keyword is used by method to refer to object that invoked it? this} {29 which of these access specifier can be used for an interface? public} {29 which of these access specifier can be used for an interface? protected} {29 which of these access specifier can be used for an interface? private} {29 which of these access specifier can be used for an interface? all of the mentioned} {30 which of these access specifier can be used for an interface? public} {30 which of these access specifier can be used for an interface? protected} {30 which of these access specifier can be used for an interface? private} {30 which of these access specifier can be used for an interface? all of the mentioned} {31 which of these access specifier can be used for an interface? public} {31 which of these access specifier can be used for an interface? protected} {31 which of these access specifier can be used for an interface? private} {31 which of these access specifier can be used for an interface? all of the mentioned} {32 which of these access specifier can be used for an interface? public} {32 which of these access specifier can be used for an interface? protected} {32 which of these access specifier can be used for an interface? private} {32 which of these access specifier can be used for an interface? all of the mentioned}]
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 15:29:44 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:32:21 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 15:32:21 questionimpl.go:25: dial onlinetestuser:Rpqb_123: unknown network onlinetestuser:Rpqb_123
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:43:24 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 15:48:02 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 17:59:12 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:00:26 FetchQuestion.go:16: calling Question manager
TRACE: 2017/03/20 18:00:29 questionimpl.go:25: ssh: unexpected packet in response to channel open: <nil>
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] Listening and serving HTTP on :8082
TRACE: 2017/03/20 18:12:24 debug.go:45: [GIN-debug] [ERROR] listen tcp :8082: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:15:06 debug.go:45: [GIN-debug] Listening and serving HTTP on :8083
TRACE: 2017/03/20 18:31:51 register.go:17: calling register manager
TRACE: 2017/03/20 18:31:54 userimpl.go:50: ssh: unexpected packet in response to channel open: <nil>
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:36:07 debug.go:45: [GIN-debug] Listening and serving HTTP on :8083
TRACE: 2017/03/20 18:36:11 register.go:17: calling register manager
TRACE: 2017/03/20 18:36:15 userimpl.go:50: ssh: unexpected packet in response to channel open: <nil>
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 18:45:24 debug.go:45: [GIN-debug] Listening and serving HTTP on :8083
TRACE: 2017/03/20 18:45:30 register.go:17: calling register manager
TRACE: 2017/03/20 18:45:34 userimpl.go:50: write tcp 192.168.0.8:56870->54.218.55.72:22: use of closed network connection
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 19:52:16 debug.go:45: [GIN-debug] Listening and serving HTTP on :8083
TRACE: 2017/03/20 19:52:21 register.go:17: calling register manager
TRACE: 2017/03/20 19:52:25 userimpl.go:50: write tcp 192.168.0.8:59063->54.218.55.72:22: use of closed network connection
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 20:09:32 debug.go:45: [GIN-debug] Listening and serving HTTP on :8083
TRACE: 2017/03/20 20:09:47 register.go:17: calling register manager
TRACE: 2017/03/20 20:09:49 userimpl.go:50: read tcp 192.168.0.8:60513->54.218.55.72:22: use of closed network connection
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 20:11:53 debug.go:45: [GIN-debug] Listening and serving HTTP on :8083
TRACE: 2017/03/20 20:11:56 register.go:17: calling register manager
TRACE: 2017/03/20 20:11:58 userimpl.go:50: read tcp 192.168.0.8:60701->54.218.55.72:22: use of closed network connection
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 20:14:13 debug.go:45: [GIN-debug] Listening and serving HTTP on :8083
TRACE: 2017/03/20 20:14:20 register.go:17: calling register manager
TRACE: 2017/03/20 20:14:22 userimpl.go:50: ssh: unexpected packet in response to channel open: <nil>
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] POST   /registerUser             --> OnlineTestGo/webservice.RegisterUser (3 handlers)
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] POST   /userAnswer               --> OnlineTestGo/webservice.AnswerList (3 handlers)
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] GET    /questions                --> OnlineTestGo/webservice.QuestionList (3 handlers)
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] POST   /addquestions             --> OnlineTestGo/webservice.AddQuestions (3 handlers)
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] GET    /testService              --> OnlineTestGo/webservice.TestService (3 handlers)
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] GET    /admin                    --> OnlineTestGo/webservice.Admin (3 handlers)
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] POST   /mocklogin                --> OnlineTestGo/webservice.Mocklogin (3 handlers)
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] GET    /mocklogout               --> OnlineTestGo/webservice.Mocklogout (3 handlers)
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] GET    /logout                   --> OnlineTestGo/webservice.Logout (3 handlers)
TRACE: 2017/03/20 20:18:34 debug.go:45: [GIN-debug] Listening and serving HTTP on :8083
TRACE: 2017/03/20 20:18:39 register.go:17: calling register manager
TRACE: 2017/03/20 20:18:41 userimpl.go:50: read tcp 192.168.0.8:61461->54.218.55.72:22: use of closed network connection
>>>>>>> bf457ed1017c64a30df4e6a82766ab44507bbaa9
>>>>>>> 4a89b0d9b07c31b88debbb2b33a3bdd69a907690
